import { GoogleGenAI, Modality } from "@google/genai";
import { OutfitItem } from "../types";

const ai = new GoogleGenAI({ apiKey: process.env.API_KEY as string });

function fileToGenerativePart(file: File) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onload = () => {
      if (typeof reader.result !== 'string') {
        return reject(new Error("Failed to read file as base64 string."));
      }
      const base64Data = reader.result.split(',')[1];
      resolve({
        inlineData: {
          data: base64Data,
          mimeType: file.type,
        },
      });
    };
    reader.onerror = (error) => reject(error);
    reader.readAsDataURL(file);
  });
}

async function urlToGenerativePart(url: string, mimeType: string) {
    const response = await fetch(url);
    if (!response.ok) {
        throw new Error(`Failed to fetch image from URL: ${url}`);
    }
    const blob = await response.blob();
    const reader = new FileReader();
    return new Promise((resolve, reject) => {
        reader.onloadend = () => {
            if (typeof reader.result !== 'string') {
                 return reject(new Error("Failed to read blob as base64 string."));
            }
            const base64Data = reader.result.split(',')[1];
            resolve({
                inlineData: {
                    data: base64Data,
                    mimeType: mimeType,
                },
            });
        };
        reader.onerror = reject;
        reader.readAsDataURL(blob);
    });
}

export const generateVirtualTryOnImage = async (
  userImageFile: File,
  items: OutfitItem[],
): Promise<string> => {
    try {
        const userImagePart = await fileToGenerativePart(userImageFile);
        
        const productPartsPromises = items.map(item => urlToGenerativePart(item.product.imageUrls[item.selectedColor], 'image/jpeg'));
        const productImageParts = await Promise.all(productPartsPromises);

        const productDescriptions = items.map(item => `${item.product.name} (${item.selectedColor}) - Cat√©gorie: ${item.product.category}`).join(', ');
        
        const prompt = `**Objective:** Perform a virtual try-on by replacing clothing items in an image.

**Source Image:** The first image provided is the person.
**Product Image(s):** The following image(s) are the products to be worn: ${productDescriptions}.

**Core Task:**
You MUST edit the source image. For each product, identify the corresponding item on the person (e.g., shoes, jacket, sunglasses) and replace it with the product from the product image.

**Strict Rules:**
1.  **REPLACE, DO NOT ADD:** The goal is to swap clothes, not to add new objects to the scene. The person should not be holding the new items. They should be wearing them.
2.  **PRESERVE IDENTITY:** The person's face, body, pose, and any clothing not being replaced MUST remain unchanged.
3.  **PRESERVE BACKGROUND:** The background must be identical to the source image.
4.  **SEAMLESS INTEGRATION:** The new items must be realistically integrated, with correct lighting, shadows, and perspective.

Output a single, photorealistic image showing the result.`;

        const response = await ai.models.generateContent({
            model: 'gemini-2.5-flash-image',
            contents: {
                parts: [userImagePart, ...productImageParts, { text: prompt }],
            },
            config: {
                responseModalities: [Modality.IMAGE, Modality.TEXT],
            },
        });
        
        for (const part of response.candidates?.[0]?.content?.parts || []) {
            if (part.inlineData) {
                const mimeType = part.inlineData.mimeType;
                const base64Data = part.inlineData.data;
                return `data:${mimeType};base64,${base64Data}`;
            }
        }

        throw new Error("No image was generated by the AI.");

    } catch (error) {
        console.error("Error generating virtual try-on image:", error);
        throw new Error("Failed to generate AI image. Please check the console for details.");
    }
};